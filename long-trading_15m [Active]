// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=5
var int qty = 3300
strategy(title='LONG-TRADING [15m]', overlay=true, initial_capital=qty, default_qty_type=strategy.cash, default_qty_value=qty, pyramiding=2, commission_type=strategy.commission.cash_per_order, commission_value=0.15)

//---------------------------------------------
// VARIABLES & INITIALIZATION
//---------------------------------------------
tp = input.float(7.5, 'TAKE PROFIT (%)', minval=0, step=0.25)

float step = input.float(0.05, "Radius Step", step=0.001)
float multi = input.float(2.5, "Start Points Distance", step=0.1)

bool trend = na
var float multi1 = 0.0
var float multi2 = 0.0
int n = 3
var float band = 0.0

//---------------------------------------------
// BAND & TREND CALCULATION
//---------------------------------------------
float distance = ta.sma(math.abs(high - low), 100) * multi
float distance1 = ta.sma(math.abs(high - low), 100) * 0.2

if (bar_index == 101)
    trend := true
    band := low * 0.8

if (close < band)
    trend := false

if (close > band)
    trend := true

if (trend[1] == false and ta.change(trend))
    band := low - distance

if (trend[1] == true and ta.change(trend))
    band := high + distance

if (bar_index % n == 0 and trend)
    multi1 := 0.0
    multi2 += step    
    band += distance1 * multi2

if (bar_index % n == 0 and not trend)
    multi1 += step
    multi2 := 0.0   
    band -= distance1 * multi1

Sband = ta.sma(band, n)

color = trend ? #54b6d4 : #cf2b2b

band_upper = ta.sma(band + distance * 0.5, n)
band_lower = ta.sma(band - distance * 0.5, n)
band1 = trend ? band_upper : band_lower

plot(band1, color=bar_index % 2 == 0 ? color.new(chart.fg_color, 50) : na)

plot1 = plot(ta.change(trend) ? na : Sband, style=plot.style_linebr, color=color.gray)
plot2 = plot(ta.sma(hl2, 20), display=display.none)

fill(plot1, plot2, band, ta.sma(hl2, 20), color.new(color, 60), na)

//---------------------------------------------
// STOCHASTIC OSCILLATOR BY COWWATSON
//---------------------------------------------
length = input.int(defval=14, title='Length', group="STOCHASTIC OSCILLATOR")
dLength = input.int(defval=3, title='D Line Length', group="STOCHASTIC OSCILLATOR")
upperTrigger = input.int(defval=80, title='Upper Trigger Line', group="STOCHASTIC OSCILLATOR")
lowerTrigger = input.int(defval=20, title='Lower Trigger Line', group="STOCHASTIC OSCILLATOR")

lowVal = ta.lowest(low, length)
highVal = ta.highest(high, length)
slowK = (close - lowVal) / (highVal - lowVal) * 100
fastD = ta.sma(slowK, dLength)

var float price_adjustment = close / 125

entry_long_mkt_conditions = (
     slowK <= 12.5 - price_adjustment
     and fastD <= 12.5 - price_adjustment
     and (ta.crossunder(slowK, fastD) 
     or ta.crossover(slowK, fastD))
     ) and barstate.isconfirmed

exit_long_mkt_conditions = (
     slowK >= 87.5 + price_adjustment
     and fastD >= 87.5 + price_adjustment
     and (ta.crossunder(slowK, fastD) 
     or ta.crossover(slowK, fastD))
     ) and barstate.isconfirmed

//---------------------------------------------
// CALCULATION OF RISK-ADJUSTED RETURN (Sharpe Ratio)
//---------------------------------------------

annualRiskFreeRate = input.float(0.0333, 'Annual Risk-Free Rate', minval=0, step=0.001)

lookbackPeriod = 5000 - 1

logReturns = math.log(close / close[1])
volatility = ta.stdev(logReturns, lookbackPeriod)
tenMonthVolatility = volatility * math.sqrt(lookbackPeriod / 10)

profitRate = strategy.netprofit_percent / 100

sharpeRatio = (profitRate - annualRiskFreeRate) / tenMonthVolatility

var label sharpeLabel = na

if (na(sharpeLabel))
    sharpeLabel := label.new(x=bar_index, y=low, text="Sharpe Ratio: " + str.tostring(sharpeRatio, "#.##"), style=label.style_label_up, color=color.black, textcolor=color.white, size=size.normal, xloc=xloc.bar_index, yloc=yloc.price)
else
    label.set_xy(sharpeLabel, bar_index, low)
    label.set_text(sharpeLabel, "Sharpe Ratio: " + str.tostring(sharpeRatio, "#.##"))

//---------------------------------------------
// STRATEGY EXECUTION
//---------------------------------------------
var float qty_entry = 7 * qty / 12
var float qty_reentry = na

var float entryPrice = na
var float limitExitPrice = na
var float stopLossPrice = na
var int exitStage = na
var int reentryStage = na

var float tp_factor = 1 + tp / 100
var float sl_factor = 1 - tp / 100
var float price_factor = na
var float split_factor = na

var string lastAction = ""

if (entry_long_mkt_conditions[1] and not trend[1] and strategy.opentrades[1] == 0)
    a = -2.5 / 10000
    entry_value = if close[1] <= 250 and close[1] >= 100
        math.floor(close[1] + a * math.pow(close[1] - 250, 2))
    else if close[1] >= 500
        math.floor(close[1] + a * math.pow(close[1] - 500, 2))
    else if close[1] > 250 and close[1] < 500
        math.floor(close[1])
    else
        close[1]
    label.new(bar_index[1], close[1] - 0.5, "Upcoming Entry | " + str.tostring(math.round(entry_value, 3 - str.length(str.tostring(int(close[1]))))), style=label.style_label_up, color=color.new(color.green, 0), textcolor=color.white)

if entry_long_mkt_conditions and not trend and strategy.opentrades == 0
    entryPrice := (high + low) / 2
    split_factor := math.pow(10, str.length(str.tostring(int(entryPrice))) - 1)
    price_factor := (-tp/2 + math.sqrt(math.abs(2.5 * split_factor - entryPrice) / tp) + (2.5 * split_factor < entryPrice ? -tp / 5 : 0)) / 100
    limitExitPrice := math.round(entryPrice * (tp_factor + price_factor), 2)
    stopLossPrice := math.round(entryPrice * (sl_factor - price_factor + (5 * split_factor < entryPrice ? tp / (250 - 5 * math.log(entryPrice)) : -tp / (500 + 5 * math.log(entryPrice)))), 2)
    strategy.entry("L1 | " + str.tostring(limitExitPrice) + " | " + str.tostring(stopLossPrice), strategy.long, math.round(qty_entry / entryPrice))
    qty_reentry := qty - entryPrice * math.round(qty_entry / entryPrice)
    exitStage := 0
    reentryStage := 0
    lastAction := ""

if close < stopLossPrice and strategy.opentrades == 1
    reentryStage := 1

if reentryStage == 1 and trend and not exit_long_mkt_conditions and strategy.opentrades == 1
    strategy.entry("L2 | " + str.tostring(limitExitPrice), strategy.long, math.round(qty_reentry / entryPrice))
    lastAction := ""

if exit_long_mkt_conditions and not trend
    exitStage := 1

if exitStage == 1 and not trend and strategy.opentrades > 0
    strategy.exit("CL", limit=limitExitPrice, stop=stopLossPrice/2.5)
    if lastAction != "exit_created" and close[1] > limitExitPrice * 0.95
        label.new(bar_index[1], close[1] + 0.5, "Limit: " + str.tostring(math.ceil(close[1] + (5 * split_factor - entryPrice) / (2.5 * split_factor))), style=label.style_label_down, color=color.new(color.orange, 0), textcolor=color.white)
        lastAction := "exit_created"
else if exitStage == 1 and trend and strategy.opentrades > 0
    strategy.cancel_all()
    exitStage := 2
    if lastAction == "exit_created"
        label.new(bar_index[1], close[1], "Limit Order Cancelled", style=label.style_xcross, color=color.new(color.red, 0), textcolor=color.white)
        lastAction := "exit_cancelled"
else if exitStage == 2 and not trend and strategy.opentrades > 0
    strategy.exit("CL", limit=limitExitPrice, stop=stopLossPrice/2.5)
    if lastAction != "exit_created" and close[1] > limitExitPrice * 0.95
        label.new(bar_index[1], close[1] + 0.5, "Limit: " + str.tostring(math.ceil(close[1] + (5 * split_factor - entryPrice) / (2.5 * split_factor))), style=label.style_label_down, color=color.new(color.orange, 0), textcolor=color.white)
        lastAction := "exit_created"