// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=4
strategy(title = "ONLY-LONG [NVDA]", overlay = true, initial_capital = 10000, pyramiding = 2,
   calc_on_order_fills = false, calc_on_every_tick = false, default_qty_type = strategy.cash, default_qty_value = 1000, commission_value = 0)

//---------------------------------------------
// STRATEGY OVERVIEW
//---------------------------------------------
// Based on https://www.tradingview.com/script/gTKmZ7my/
    // This strategy is designed for conservative swing trading, utilizing a combination of RMI, ADX, RSI, and Ichimoku indicators.
    // It is contrarian in nature, buying during price drops when certain conditions are met.
    // The strategy does not use a traditional stop loss but rather re-enters trades when a set loss percentage is reached.
    // The position is exited only when a take-profit condition is met.

    // Adjusted for NVDA at 1m (1D)

//---------------------------------------------
// RMI (Relative Momentum Index) CONFIGURATION
//---------------------------------------------
// The RMI is calculated based on the input length and momentum. Overbought and oversold thresholds are set to identify potential entry points.

RMI_len = input(24, title="RMI LENGTH", type=input.integer, minval = 1)
mom = input(5, title="RMI MOMENTUM", type=input.integer, minval = 1)
RMI_ob = input(70,title="RMI OVERBOUGHT", type=input.integer, minval = 0)
RMI_os = input(30,title="RMI OVERSOLD", type=input.integer, minval = 0)

RMI(len, m)=>
    up = ema(max(close - close[m],0), len)
    dn = ema(max(close[m] - close,0), len)
    RMI = dn == 0 ? 0 : 100 - 100 / (1 + up / dn)
    RMI


//---------------------------------------------
// ADX (Average Directional Index) CONFIGURATION
//---------------------------------------------
// ADX is calculated to measure the strength of a trend. It identifies whether the market is trending or ranging by comparing directional movements.

ADX_len = input(88, title="ADX LENGTH", type=input.integer, minval = 1)
th = input(3, title="ADX THRESHOLD", type=input.integer, minval = 0)

calcADX(len)=>
    var float SmoothedTrueRange = 0.0
    var float SmoothedDirectionalMovementPlus = 0.0
    var float SmoothedDirectionalMovementMinus = 0.0
    TrueRange = max(max(high-low, abs(high-nz(close[1]))), abs(low-nz(close[1])))
    DirectionalMovementPlus = high-nz(high[1]) > nz(low[1])-low ? max(high-nz(high[1]), 0): 0
    DirectionalMovementMinus = nz(low[1])-low > high-nz(high[1]) ? max(nz(low[1])-low, 0): 0
    SmoothedTrueRange := nz(SmoothedTrueRange[1]) - (nz(SmoothedTrueRange[1])/len) + TrueRange
    SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - (nz(SmoothedDirectionalMovementPlus[1])/len) + DirectionalMovementPlus
    SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - (nz(SmoothedDirectionalMovementMinus[1])/len) + DirectionalMovementMinus
    DIP = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
    DIM = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100
    DX = abs(DIP-DIM) / (DIP+DIM)*100
    adx = sma(DX, len)
    [DIP,DIM,adx]
 
[DIPlus,DIMinus,ADX] = calcADX(ADX_len)

macol = DIPlus > DIMinus and ADX > th ? color.lime : DIPlus < DIMinus and ADX > th ? color.red : color.orange

barcolor(color = macol, title = "ADX")


//---------------------------------------------
// RSI (Relative Strength Index) CONFIGURATION
//---------------------------------------------
// The RSI is used to detect bullish or bearish market conditions. The calculated value is used in combination with other indicators to confirm trends.

RSI_len = input(55, "RSI LENGTH", minval = 1)
RSI_obos = input(52,title="RSI BULLISH/BEARISH", type=input.integer, minval = 1)

RSI(len)=>
    up_rsi = rma(max(change(close), 0), len)
    down_rsi = rma(-min(change(close), 0), len)
    rsi = down_rsi == 0 ? 100 : up_rsi == 0 ? 0 : 100 - (100 / (1 + up_rsi / down_rsi))
    rsi


//---------------------------------------------
// ICHIMOKU CLOUD CONFIGURATION
//---------------------------------------------
// The Ichimoku Cloud is used to identify the main trend direction. This configuration includes the conversion line, base line, and leading span lines.

conversionPeriods = input(21, minval=1, title="ICHIMOKU CONVERSION LINE")
basePeriods = input(55, minval=1, title="ICHIMOKU BASE LINE")
laggingSpan2Periods = input(96, minval=1, title="ICHIMOKU LAGGING SPAN 2")

indexHighTF = barstate.isrealtime ? 1 : 0
indexCurrTF = barstate.isrealtime ? 0 : 1

ichimoku_close = security(syminfo.tickerid, 'D', close[indexHighTF], lookahead=barmerge.lookahead_off)
ichimoku_close_curr = ichimoku_close[indexCurrTF]

donchian(len) => avg(lowest(len), highest(len))

conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)

leadLine1 = avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

p1 = plot(leadLine1, color=color.green, title="Ichimoku Lead 1")
p2 = plot(leadLine2, color=color.red, title="Ichimoku Lead 2")

fill(p1, p2, title = "Ichimoku Background", color = leadLine1 > leadLine2 ? color.green : color.red)


//---------------------------------------------
// STRATEGY CONDITIONS FOR LONG AND SHORT POSITIONS
//---------------------------------------------
// These conditions combine the RMI, ADX, RSI, and Ichimoku signals to determine when to enter a long or short position.

var bool longCondition = na
var bool shortCondition = na

longCondition := crossover(RMI(RMI_len, mom), RMI_os) and (DIPlus < DIMinus and ADX > th) and (RSI(RSI_len) < RSI_obos) and (leadLine1 > leadLine2)
shortCondition := crossunder(RMI(RMI_len, mom), RMI_ob) and (DIPlus > DIMinus and ADX > th) and (RSI(RSI_len) > RSI_obos) and (leadLine1 < leadLine2)


//---------------------------------------------
// TRACKING THE LAST OPENED LONG POSITION
//---------------------------------------------
// The code captures the price and time of the last long entry, which is used later for managing the position.

var float last_open_longCondition = na
last_open_longCondition := longCondition ? close : nz(last_open_longCondition[1])

var int last_longCondition = 0
last_longCondition := longCondition ? time : nz(last_longCondition[1])

in_longCondition = true


//---------------------------------------------
// STOP LOSS (RE-ENTRY) LOGIC
//---------------------------------------------
// Instead of a traditional stop loss, this section manages a re-entry strategy when the price drops by a certain percentage from the last entry.

sl = input(10, "STOP LOSS %", type = input.float, minval = 0, step = 0.5)
long_sl = crossunder(low, (1-(sl/100))*last_open_longCondition) and in_longCondition and not longCondition

var int last_long_sl = na
last_long_sl := long_sl ? time : nz(last_long_sl[1])

var bool CondIni_long_sl = 0
CondIni_long_sl := long_sl ? 1 : longCondition ? -1 : nz(CondIni_long_sl[1])

Final_Long_sl = long_sl and nz(CondIni_long_sl[1]) == -1 and in_longCondition and not longCondition


//---------------------------------------------
// COUNTING THE NUMBER OF LONG POSITIONS
//---------------------------------------------
// This section counts how many long positions have been taken in the current sequence to calculate the average entry price.

var int sectionLongs = 0
sectionLongs := nz(sectionLongs[1])

if longCondition or Final_Long_sl
    sectionLongs := sectionLongs + 1


//---------------------------------------------
// AVERAGE ENTRY PRICE CALCULATION
//---------------------------------------------
// Calculates the average price of all long positions in the current sequence, which is used for the take-profit calculation.

var float sum_long = 0.0

if longCondition
    sum_long := nz(last_open_longCondition) + nz(sum_long[1])

if Final_Long_sl
    sum_long := ((1-(sl/100))*last_open_longCondition) + nz(sum_long[1])

var float Position_Price = 0.0
Position_Price := nz(Position_Price[1])

Position_Price := longCondition or Final_Long_sl ? sum_long/(sectionLongs) : na
plot(Position_Price, title = "Average Price", color = color.fuchsia, linewidth = 2, style = plot.style_cross, transp = 0)


//---------------------------------------------
// TAKE PROFIT LOGIC
//---------------------------------------------
// The strategy exits the position when the price reaches a certain percentage above the average entry price.

tp = input(20, "TAKE PROFIT %", type = input.float, minval = 0, step = 0.5)
long_tp = crossover(high, (1+(tp/100))*fixnan(Position_Price)) and in_longCondition and not longCondition

var int last_long_tp = na
last_long_tp := long_tp ? time : nz(last_long_tp[1])

Final_Long_tp = long_tp and last_longCondition > nz(last_long_tp[1])

if Final_Long_tp
    sum_long := 0.0
    sectionLongs := 0
    CondIni_long_sl == 1


//---------------------------------------------
// STRATEGY ENTRY AND EXIT EXECUTION
//---------------------------------------------
// Executes long positions based on the strategy conditions and exits based on the take-profit logic.

if longCondition or Final_Long_sl
    strategy.entry("Buy", strategy.long)

if Final_Long_tp or shortCondition
    strategy.close("Buy")
