//@version=5
strategy(title='ONLY-LONG [Day Trading]', overlay=true, initial_capital=10000, pyramiding=10, calc_on_order_fills=false, calc_on_every_tick=false, default_qty_type=strategy.cash, default_qty_value=1000, commission_value=0.05, commission_type=strategy.commission.cash_per_order)

//---------------------------------------------
// STRATEGY OVERVIEW
//---------------------------------------------
// Based on https://www.tradingview.com/script/gTKmZ7my/
// This script is designed for day trading, focusing solely on long positions. 
// It utilizes a combination of RMI, ADX, RSI, and Ichimoku indicators for entry and exit signals.
// The strategy is optimized for short time intervals (minutes) and aims to capture quick price movements.
// It enters long positions during bullish conditions and exits when take-profit or stop-loss criteria are met.

//---------------------------------------------
// ONLY-LONG STRATEGY CONFIGURATION
//---------------------------------------------
RMI_len = input.int(24, title='RMI LENGTH', minval=1)
mom = input.int(5, title='RMI MOMENTUM', minval=1)
RMI_ob = input.int(70, title='RMI OVERBOUGHT', minval=0)
RMI_os = input.int(30, title='RMI OVERSOLD', minval=0)

ADX_len = input.int(88, title='ADX LENGTH', minval=1)
th = input.int(3, title='ADX THRESHOLD', minval=0)

RSI_len = input.int(55, 'RSI LENGTH', minval=1)
RSI_obos = input.int(52, title='RSI BULLISH/BEARISH', minval=1)

conversionPeriods = input.int(21, minval=1, title='ICHIMOKU CONVERSION LINE')
basePeriods = input.int(55, minval=1, title='ICHIMOKU BASE LINE')
laggingSpan2Periods = input.int(96, minval=1, title='ICHIMOKU LAGGING SPAN 2')

sl = input.float(10, 'STOP LOSS %', minval=0, step=0.5)
tp = input.float(25, 'TAKE PROFIT %', minval=0, step=0.5)

//---------------------------------------------
// CALCULATE RMI, ADX, RSI, AND ICHIMOKU
//---------------------------------------------
RMI(len, m) =>
    up = ta.ema(math.max(close - close[m], 0), len)
    dn = ta.ema(math.max(close[m] - close, 0), len)
    RMI = dn == 0 ? 0 : 100 - 100 / (1 + up / dn)
    RMI

calcADX(len) =>
    var float SmoothedTrueRange = 0.0
    var float SmoothedDirectionalMovementPlus = 0.0
    var float SmoothedDirectionalMovementMinus = 0.0
    TrueRange = math.max(math.max(high - low, math.abs(high - nz(close[1]))), math.abs(low - nz(close[1])))
    DirectionalMovementPlus = high - nz(high[1]) > nz(low[1]) - low ? math.max(high - nz(high[1]), 0) : 0
    DirectionalMovementMinus = nz(low[1]) - low > high - nz(high[1]) ? math.max(nz(low[1]) - low, 0) : 0
    SmoothedTrueRange := nz(SmoothedTrueRange[1]) - nz(SmoothedTrueRange[1]) / len + TrueRange
    SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - nz(SmoothedDirectionalMovementPlus[1]) / len + DirectionalMovementPlus
    SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - nz(SmoothedDirectionalMovementMinus[1]) / len + DirectionalMovementMinus
    DIP = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
    DIM = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100
    DX = math.abs(DIP - DIM) / (DIP + DIM) * 100
    adx = ta.sma(DX, len)
    [DIP, DIM, adx]

[DIPlus, DIMinus, ADX] = calcADX(ADX_len)

macol = DIPlus > DIMinus and ADX > th ? color.lime : DIPlus < DIMinus and ADX > th ? color.red : color.orange

barcolor(color=macol, title='ADX')

RSI(len) =>
    up_rsi = ta.rma(math.max(ta.change(close), 0), len)
    down_rsi = ta.rma(-math.min(ta.change(close), 0), len)
    rsi = down_rsi == 0 ? 100 : up_rsi == 0 ? 0 : 100 - 100 / (1 + up_rsi / down_rsi)
    rsi

indexHighTF = barstate.isrealtime ? 1 : 0
indexCurrTF = barstate.isrealtime ? 0 : 1

ichimoku_close = request.security(syminfo.tickerid, 'D', close[indexHighTF], lookahead=barmerge.lookahead_off)
ichimoku_close_curr = ichimoku_close[indexCurrTF]

donchian(len) =>
    math.avg(ta.lowest(len), ta.highest(len))

conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)

leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

p1 = plot(leadLine1, color=color.new(color.green, 0), title='Ichimoku Lead 1')
p2 = plot(leadLine2, color=color.new(color.red, 0), title='Ichimoku Lead 2')

fill(p1, p2, title='Ichimoku Background', color=leadLine1 > leadLine2 ? color.green : color.red, transp=90)

//---------------------------------------------
// EMA CONFIGURATION
//---------------------------------------------
EMA_Length = input(20, title='EMA Length')
EMA = ta.ema(close, EMA_Length)

longCondition_EMA = ta.crossover(close, EMA)
shortCondition_EMA = ta.crossunder(close, EMA)

//---------------------------------------------
// COMBINED STRATEGY LOGIC
//---------------------------------------------
var bool longCondition = na
var bool shortCondition = na

longCondition := ta.crossover(RMI(RMI_len, mom), RMI_os) and DIPlus < DIMinus and ADX > th and RSI(RSI_len) < RSI_obos and leadLine1 > leadLine2 and longCondition_EMA
shortCondition := ta.crossunder(RMI(RMI_len, mom), RMI_ob) and DIPlus > DIMinus and ADX > th and RSI(RSI_len) > RSI_obos and leadLine1 < leadLine2 and shortCondition_EMA

//---------------------------------------------
// TRACKING LAST LONG ENTRY
//---------------------------------------------
var float last_open_longCondition = na
last_open_longCondition := longCondition ? close : nz(last_open_longCondition[1])

var int last_longCondition = 0
last_longCondition := longCondition ? time : nz(last_longCondition[1])

in_longCondition = true

//---------------------------------------------
// STOP LOSS (RE-ENTRY) LOGIC
//---------------------------------------------
long_sl = ta.crossunder(low, (1 - sl / 100) * last_open_longCondition) and in_longCondition and not longCondition

var int last_long_sl = na
last_long_sl := long_sl ? time : nz(last_long_sl[1])

var bool CondIni_long_sl = 0
CondIni_long_sl := long_sl ? 1 : longCondition ? -1 : nz(CondIni_long_sl[1])

Final_Long_sl = long_sl and nz(CondIni_long_sl[1]) == -1 and in_longCondition and not longCondition

//---------------------------------------------
// COUNTING LONG POSITIONS
//---------------------------------------------
var int sectionLongs = 0
sectionLongs := nz(sectionLongs[1])

if longCondition or Final_Long_sl
    sectionLongs += 1
    sectionLongs

//---------------------------------------------
// AVERAGE ENTRY PRICE
//---------------------------------------------
var float sum_long = 0.0

if longCondition
    sum_long := nz(last_open_longCondition) + nz(sum_long[1])
    sum_long

if Final_Long_sl
    sum_long := (1 - sl / 100) * last_open_longCondition + nz(sum_long[1])
    sum_long

var float Position_Price = 0.0
Position_Price := nz(Position_Price[1])

Position_Price := longCondition or Final_Long_sl ? sum_long / sectionLongs : na
plot(Position_Price, title='Average Price', color=color.new(color.fuchsia, 0), linewidth=2, style=plot.style_cross)

//---------------------------------------------
// TAKE PROFIT LOGIC
//---------------------------------------------
long_tp = ta.crossover(high, (1 + tp / 100) * fixnan(Position_Price)) and in_longCondition and not longCondition

var int last_long_tp = na
last_long_tp := long_tp ? time : nz(last_long_tp[1])

Final_Long_tp = long_tp and last_longCondition > nz(last_long_tp[1])

if Final_Long_tp
    sum_long := 0.0
    sectionLongs := 0
    CondIni_long_sl == 1

//---------------------------------------------
// STRATEGY EXECUTION
//---------------------------------------------
if longCondition or Final_Long_sl
    strategy.entry('Buy', strategy.long)

if Final_Long_tp or shortCondition
    strategy.close('Buy')


//---------------------------------------------
// STOCHASTIC OSCILLATOR CONFIGURATION
//---------------------------------------------
length = input.int(defval=14, title='Length', group='STOCHASTIC OSCILLATOR')
dLength = input.int(defval=3, title='D Line Length', group='STOCHASTIC OSCILLATOR')
upperTrigger = input.int(defval=80, title='Upper Trigger Line', group='STOCHASTIC OSCILLATOR')
lowerTrigger = input.int(defval=20, title='Lower Trigger Line', group='STOCHASTIC OSCILLATOR')

//---------------------------------------------
// CALCULATE STOCHASTIC OSCILLATOR
//---------------------------------------------
lowVal = ta.lowest(low, length)
highVal = ta.highest(high, length)
slowK = (close - lowVal) / (highVal - lowVal) * 100
fastD = ta.sma(slowK, dLength)

//---------------------------------------------
// STOCHASTIC OSCILLATOR VISUALIZATION
//---------------------------------------------
plot(slowK, color=color.new(color.lime, 0), title='Stochastic %K')
plot(fastD, color=color.new(color.orange, 0), title='Stochastic %D')
upperBound = hline(upperTrigger, title='Upper Trigger', linestyle=hline.style_dashed)
lowerBound = hline(lowerTrigger, title='Lower Trigger', linestyle=hline.style_dashed)
fill(upperBound, lowerBound, color=color.new(color.purple, 90), title='Stochastic Background')
