// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=5
strategy(title='TREND-CATCHER [Options]', overlay=true, initial_capital=1000, pyramiding=1, calc_on_order_fills=false, calc_on_every_tick=false, default_qty_type=strategy.fixed, default_qty_value=28, commission_value=0.06, commission_type=strategy.commission.cash_per_order)

//---------------------------------------------
// STRATEGY OVERVIEW
//---------------------------------------------
// This script is designed for trading options, focusing solely on current trends.
// The strategy is optimized for short time frames, capturing quick movements.
// It enters positions during favorable conditions and exits based on a time-adjusted take-profit target.

//---------------------------------------------
// INPUT PARAMETERS
//---------------------------------------------
tp = input.float(0.7, 'Take Profit (%)', minval=0, step=0.025)
step = input.float(0.15, "Radius Step", step=0.001)
multi = input.float(2, "Start Points Distance", step=0.1)

length = input.int(14, title='Stochastic Length', group="Stochastic Oscillator")
dLength = input.int(3, title='D Line Length', group="Stochastic Oscillator")
upperTrigger = input.int(80, title='Upper Trigger Line', group="Stochastic Oscillator")
lowerTrigger = input.int(20, title='Lower Trigger Line', group="Stochastic Oscillator")

//---------------------------------------------
// VARIABLES & INITIALIZATION
//---------------------------------------------
var float multi1 = 0.0
var float multi2 = 0.0
var float band = 0.0
var int trendSwitch = 0
var float entryPrice = na
bool trend = na

int n = 3

//---------------------------------------------
// BAND & TREND CALCULATION
//---------------------------------------------
float distance = ta.sma(math.abs(high-low), 100) * multi
float distance1 = ta.sma(math.abs(high-low), 100) * 0.2

if (bar_index == 101)
    trend := true
    band := low * 0.8

trend := (close > band ? true : (close < band ? false : trend))

if (trend[1] != trend)
    band := trend ? (low - distance) : (high + distance)
    trendSwitch += 1

if (bar_index % n == 0)
    if (trend)
        multi1 := 0
        multi2 += step    
        band += distance1 * multi2
    else
        multi1 += step
        multi2 := 0   
        band -= distance1 * multi1

float Sband = ta.sma(band, n)
color trendColor = trend ? #54b6d4 : #cf2b2b

float bandUpper = ta.sma(band + distance * 0.5, n)
float bandLower = ta.sma(band - distance * 0.5, n)
float band1 = trend ? bandUpper : bandLower

plot(band1, color = bar_index % 2 == 0 ? color.new(chart.fg_color, 50) : na)
plot1 = plot(ta.change(trend) ? na : Sband, style=plot.style_linebr, color=color.gray)
plot2 = plot(ta.sma(hl2, 20), display=display.none)

fill(plot1, plot2, band, ta.sma(hl2, 20), color.new(trendColor, 60), na)

//---------------------------------------------
// STOCHASTIC OSCILLATOR
//---------------------------------------------
lowVal = ta.lowest(low, length)
highVal = ta.highest(high, length)
slowK = (close - lowVal) / (highVal - lowVal) * 100
fastD = ta.sma(slowK, dLength)

float tp2 = ((tp - (upperTrigger + lowerTrigger) / 200) / 2) * 100

entry_long_mkt_conditions = (
     slowK <= (upperTrigger+lowerTrigger)/2 + tp2
     and fastD <= (upperTrigger+lowerTrigger)/2 + tp2
     and (ta.crossunder(slowK, fastD) 
     or ta.crossover(slowK, fastD))
     ) and barstate.isconfirmed

entry_short_mkt_conditions = (
     slowK >= (upperTrigger+lowerTrigger)/2 - tp2
     and fastD >= (upperTrigger+lowerTrigger)/2 - tp2
     and (ta.crossunder(slowK, fastD) 
     or ta.crossover(slowK, fastD))
     ) and barstate.isconfirmed

exit_long_mkt_conditions = (
     slowK >= upperTrigger+tp2
     and fastD >= upperTrigger+tp2
     and (ta.crossunder(slowK, fastD) 
     or ta.crossover(slowK, fastD))
     ) and barstate.isconfirmed

exit_short_mkt_conditions = (
     slowK <= lowerTrigger+tp2/2
     and fastD <= lowerTrigger+tp2/2
     and (ta.crossunder(slowK, fastD) 
     or ta.crossover(slowK, fastD))
     ) and barstate.isconfirmed

//---------------------------------------------
// STRATEGY EXECUTION
//---------------------------------------------
var int entry = 0
var int exit = 0
var int entryDay = na

timeCheck = (hour < 10) or (hour == 10 and minute <= 30)
noOpenTrades = strategy.opentrades == 0
callConditions = (entry == 3) and entry_long_mkt_conditions and trend and (low > Sband + 0.85)
bool putConditions = (entry == 4) and entry_short_mkt_conditions and not trend and (high < Sband - 0.85)

if (hour == 9 and minute <= 45)
    trendSwitch := 0

if (trendSwitch == 1)
    entry := trend ? 1 : 2

if (hour == 9 and minute == 45)
    entry := (entry == 1) ? 3 : (entry == 2 ? 4 : entry)

if (callConditions and noOpenTrades and timeCheck)
    strategy.entry('Buy Call', strategy.long, 14 + (dayofweek(time) - 2) * 7)
    entryPrice := (high + low) / 2
    entryDay := dayofweek(time)
    entry := 0

if (putConditions and noOpenTrades and timeCheck)
    strategy.entry('Buy Put', strategy.short, 14 + (dayofweek(time) - 2) * 7)
    entryPrice := (high + low) / 2
    entryDay := dayofweek(time)
    entry := 0

float priceFactor = math.pow(10, str.length(str.tostring(math.floor(entryPrice)))) * 100

thetaDecayFactor(entryDay, entryPrice, currentDay) =>
    int decayDays = currentDay - entryDay
    float decayRate = 6.75 / entryPrice
    float thetaDecay = 1.0 - math.exp(-decayRate * decayDays)
    thetaDecay

if (exit_long_mkt_conditions or entryPrice > 300 or entryPrice < 100)
    float thetaAdj = thetaDecayFactor(entryDay, entryPrice, dayofweek(time))
    float tpLimit = entryPrice * (1 + (0.0099 - entryPrice / priceFactor) + thetaAdj)
    strategy.exit('Sell Call', 'Buy Call', limit=tpLimit)

if (exit_short_mkt_conditions or entryPrice > 300 or entryPrice < 100)
    float thetaAdj = thetaDecayFactor(entryDay, entryPrice, dayofweek(time))
    float tpLimit = entryPrice * (1 - (0.0099 - entryPrice / priceFactor) / 2 - thetaAdj)
    strategy.exit('Sell Put', 'Buy Put', limit=tpLimit)
